version: "1.0"

services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    ports:
      - "80:80"
      - "8081:8080"
      - "443:443"
    profiles: ["node2"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /docker-compose/traefik.yml:/traefik.yml
    networks:
      - autograde-network
    command:
      - --api.insecure=true
      - --providers.docker
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --accesslog
    labels:
      - "traefik.http.routers.api.rule=Host(`s3.autograde.dev`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.middlewares=jwt-auth"
      - "traefik.http.middlewares.jwt-auth.forwardauth.address=http://172.16.8.212:9090/realms/spring-boot-realm-dev/protocol/openid-connect/token"
      - "traefik.http.middlewares.jwt-auth.forwardauth.authResponseHeaders=Authorization"

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    profiles: ["node1"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./db_data:/var/lib/postgresql/data
      - ./docker-compose/pgsql:/docker-entrypoint-initdb.d
    networks:
      - autograde-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.0.0-management
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5673:5672"
    profiles: ["node1"]
    environment:
      RABBITMQ_QUEUE_NAME_EVA: notification
      RABBITMQ_HOST: host.docker.internal
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./docker-compose/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - autograde-network

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    profiles: ["node3"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: false
      MINIO_ENDPOINT: host.docker.internal:9000
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
    volumes:
      - ./docker-compose/minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - autograde-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.1
    container_name: keycloak
    profiles: ["node3"]
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABSE: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME_URL: ${KC_HOSTNAME_URL}
      #KC_HOSTNAME_STRICT_HTTPS: "true"
      #KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KC_PROXY: edge
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      #KEYCLOAK_FRONTEND_URL: ${KEYCLOAK_FRONTEND_URL
    ports:
      - "9090:8080"
    volumes:
      - /docker-compose/keycloak/import:/opt/keycloak/data/import
    networks:
      - autograde-network
    depends_on:
      - postgres
    command:
      - start-dev --import-realm
      - --http-enabled=true
  
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
    profiles: ["node2"]
    volumes:
      - ./docker-compose/nginx:/usr/share/nginx/html
    networks:
      - autograde-network

  go-worker-evaluation:
    image: jhonm8a/go-worker-evaluation:latest
    container_name: go-worker-evaluation
    ports:
      - "8081:8081"
    profiles: ["node1"]
    environment:     
      MAX_WORKERS: ${MAX_WORKERS}
      MAX_QUEUE: ${MAX_QUEUE}
    networks:
      - autograde-network
  
  notification:
    image: hudson94/autograde-dev-notification
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_HOST: rabbitmq
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
    networks:
      - autograde-network
    container_name: notification

  estudiantes-es:
    image: oepaezb/estudiantes:latest
    container_name: estudiantes-es
    ports: "8085:8080"
    profiles: ["node1"]
    depends_on:
      - postgres
    environment:
      IP_DATABASE: ${IP_DATABASE}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_ISSUER_URI: ${JWT_ISSUER_URI}
    networks:
      - autograde-network   

  docentes-es:
    image: oepaezb/docentes:latest
    container_name: docentes-es
    ports: "8084:8080"
    profiles: ["node1"]
    depends_on:
      - postgres
    environment:
      IP_DATABASE: ${IP_DATABASE}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_ISSUER_URI: ${JWT_ISSUER_URI}
    networks:
      - autograde-network     
  
  auth-us:
    image: oepaezb/auth:latest
    profiles: ["node1"]
    ports: "8083:8080"
    container_name: auth-us
    environment:
      IP_DATABASE: ${IP_DATABASE}
      JWT_ISSUER_URI: ${JWT_ISSUER_URI}
      JWT_SET_URI: ${JWT_SET_URI}
      LOGGIN_LEVEL_KEYCLOAK: ${LOGGIN_LEVEL_KEYCLOAK}
      RESOURCE_ID: ${RESOURCE_ID}
      PRINCIPLE_ATTRIBUTE: ${PRINCIPLE_ATTRIBUTE}
    networks:
      - autograde-network

apievaluacion:
    container_name: api-evaluacion
    env_file: .env
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on: 
      - rabbitmq
      - postgres
    ports:
      - "5000:5000"
    image: lkranl/autograde-dev-apievaluacion:0.1
    networks:
      - autograde-network


networks:
  autograde-network:
    driver: bridge
